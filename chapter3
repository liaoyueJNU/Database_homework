Chapter3
3.1:
a.
select title 
from course as c
join department as d
on c.dept_name = d.dept_name 
where c.credits = 3

b.
select name
from student
where ID in
(select s_ID from advisor where i_ID in (select ID from instructor where name = 'Morris'))

c.
select max(salary)
from instructor

d.
select name
from instructor
where salary = (select max(salary) from instructor)

e.
select course_id, count(*)
from takes
where semester = 'fall'
group by course_id

f.
select  count(*)
from takes
where semester = 'fall'
group by course_id
limit 1

g.
select  course_id
from takes
where semester = 'fall'
group by course_id
limit 1

3.2
intended to leave blank

3.3
a.
update instructor as i
set salary = salary *1.1
where i.dept_name = 'Comp. Sci.'

b.
 delete 
from course
where course_id not in (select course_id  from section)

c.
insert into instructor 
select ID, name, dept_name, 10000
from student 
where tot_cred >= 100

3.4
a.
select count(distinct *)
from participated as p
join car as c
on p.license = c.license and c.year = 2009

b.
insert accident values(10000, 2020/10/18, 'Peking')

c.
delete from
car
where model = 'Mazda' and licese in
(select licese from person as p, owns as o
where p.name = 'John Smith' and p.dirver_id = o. driver_id)

3.5
a.
select ID,
   case
      when score < 40 then 'f'
      when score < 60 then 'c'
      when score < 80 then 'b'
      else 'a'
   end
from marks

b.
with grades as
(
    select ID,
      case
         when score < 40 then ’F’
         when score < 60 then ’C’
         when score < 80 then ’B’
         else ’A’
      end as grade
from marks
)
select grade, count(ID)
from grades
group by grade

3.6
select dept_name
from department
where lower(dept_name) like '%sci%'

3.7
ans:
when there is no  element that simultanenously exists p.a1 and r1.a1 and r2.a1.

3.8
a.
select *
from customer as c 
where c.customer_name not in 
(select customer_name from borrower)

b.
select  c.customer_name
from customer as c left join  customer.c1 using (customer_street, customer_city)
where c1.customer_name = 'Smith'

c.
select distinct branch_name
from branch as b natural join customer as c natural join depositor as d
where c.customer_city = 'Harrison'

3.9
a.
select e.employee_name, city
from employee as e, work as w
on e.employee_name = w.employee_name
where w.company_name = 'First Bank Corporation'

b.
select e.employee_name, city, street
from employee as e, work as w
on e.employee_name = w.employee_name
where w.company_name = 'First Bank Corporation' and salary > 10000

c.
select employee_name
from works
where company_name != 'First Bank Corporation'

d.
select employee_name
from works
where salary > all( select salary from works where company_name = 'Small Bank Corporation')

e. copy from reference, this one is the most comprehensiable
select T.company name
from company T
where 
(select R.city from company R where R.company name = T.company name)
contains
(select S.city from company S where S.company name = ’Small Bank Corporation’)

f.despite the extra c column, it is a simpler statement
select  dept_name, (count(dept_name)) as c
from instructor
group by dept_name
order by c desc
limit 1 

g.
select company_name
from works
group by company_name
having avg(salary) > (select avg(salary) from work where company_name = 'First Bank Corporation')


3.10
a.
update emlpoyee
set city = 'Newton'
where employee_name = 'Jones'

b.
update works w
   set w.salary = w.salary*
      ( case
            when ( w.salary * 1.1 > 100000) then 1.03
            else 1.1
      )
where w.emlpoyee_name in (select manager_name from managers) 
and w.company_name = 'First Bank Corporation'






